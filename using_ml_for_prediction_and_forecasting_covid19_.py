# -*- coding: utf-8 -*-
"""Using_ML_for_Prediction_and_forecasting_Covid19_.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rEwAK-hZGxuZ_-1feix9NhnsSbfdr7ly
"""

# Importing required Python Packages and Libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns 
import numpy as np
import datetime as dt
from datetime import timedelta
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures 
from sklearn.linear_model import LogisticRegression
from sklearn.svm import  SVR
from sklearn.metrics import mean_squared_error,r2_score,mean_absolute_error
import math 
import statsmodels.api as sm
from statsmodels.tsa.api import Holt,SimpleExpSmoothing,ExponentialSmoothing

# Data exploration
# load the data
Covid19=pd.read_csv("/content/covid_19_data.csv")
#Covid19=pd.read_csv("/content/time_series_covid_19_confirmed.csv")
#Covid19=pd.read_csv("/content/time_series_covid_19_deaths.csv")
#Covid19=pd.read_csv("/content/time_series_covid_19_recovered.csv")

# Two things to note here:

#The data contains a province, country, latitude, and longitude. We won't be needing those.
#The number of cases is cumulative. We'll undo the accumulation.
#Let's start by getting rid of the first four columns:

Covid19.head()

#Covid19

print("size/shape of the dataset",Covid19.shape)
print("checking for null values",Covid19.isnull().sum())
print("checking Data_Type",Covid19.dtypes)

Covid19["Country/Region"].nunique()

# Dropping column as SNo is of no use contains too many missing values
Covid19.drop(['SNo'],1,inplace=True)

# Let's check for missing values:
Covid19.isnull().sum()

#Converting "Observation Date" into Datetime format
Covid19["ObservationDate"]=pd.to_datetime(Covid19["ObservationDate"])

Covid19["ObservationDate"]

# Grouping different types of cases as per the date
grouped_multiple=Covid19.groupby(["ObservationDate"]).agg({"Confirmed":"sum","Recovered":"sum","Deaths":"sum"})

print("Basic information")
print("Total number of Confirmed Cases a round the world",grouped_multiple["Confirmed"].iloc[-1])
print("Total number of Recovered Cases a round the world",grouped_multiple["Recovered"].iloc[-1])
print("Total number of Deaths Cases a round the world",grouped_multiple["Deaths"].iloc[-1])

print("Total number of Active Cases a round the world",(grouped_multiple["Confirmed"].iloc[-1]-grouped_multiple["Recovered"].iloc[-1]-grouped_multiple["Deaths"].iloc[-1]))
print("Total number of Closed Cases a round the world",(grouped_multiple["Recovered"].iloc[-1]+grouped_multiple["Deaths"].iloc[-1]))

# Number of Confirmed Cases
#plt.figure(figsize=(15,8))
#sns.barplot(x=grouped_multiple.index.date,y=grouped_multiple["Confirmed"])
#plt.title("Distribution plot for Confirmed Case")
#plt.xticks(rotation=90)

fig=px.bar(x=grouped_multiple.index.date,y=grouped_multiple["Confirmed"])
fig.update_layout(title="Distribution plot for Confirmed Case",
xaxis_title="Date",yaxis_title="Number of Cases",)
fig.show()
plt.savefig('01br.png')

# Number of Recovered Cases
#plt.figure(figsize=(15,8))
#sns.barplot(x=grouped_multiple.index.date,y=grouped_multiple["Recovered"])
#plt.title("Distribution plot for Confirmed Case")
#plt.xticks(rotation=90)

fig=px.bar(x=grouped_multiple.index.date,y=grouped_multiple["Recovered"])
fig.update_layout(title="Distribution plot for Recovered Case",
xaxis_title="Date",yaxis_title="Number of Cases",)
fig.show()
plt.savefig('01br.png')

# Number of Deaths Cases
#plt.figure(figsize=(15,8))
#sns.barplot(x=grouped_multiple.index.date,y=grouped_multiple["Deaths"])
#plt.title("Distribution plot for Confirmed Case")
#plt.xticks(rotation=90)

fig=px.bar(x=grouped_multiple.index.date,y=grouped_multiple["Deaths"])
fig.update_layout(title="Distribution plot for Deaths Case",
xaxis_title="Date",yaxis_title="Number of Cases",)
fig.show()
plt.savefig('01br.png')

# Active Cases = Number of Confirmed Cases - Number of Recovered Cases - Number of Death Cases.
# Increase in number of Active Cases is probably an indication of Recovered case or Death case number 
# is dropping in comparison to number of Confirmed Cases drastically.

#plt.figure(figsize=(15,8))
#sns.barplot(x=grouped_multiple.index.date,y=grouped_multiple["Confirmed"]-grouped_multiple["Recovered"]-grouped_multiple["Deaths"])
#plt.title("Distribution plot for Active Case")
#plt.xticks(rotation=90)

fig=px.bar(x=grouped_multiple.index.date,y=grouped_multiple["Confirmed"]-grouped_multiple["Recovered"]-grouped_multiple["Deaths"])
fig.update_layout(title="Distribution plot for Active Case",
                  xaxis_title="Date",yaxis_title="Number of Cases",)
fig.show()

# Closed Cases = Number of Recovered Cases + Number of Death Cases.
# Increase in number of Closed classes imply either more patients are
# getting recovered from the disease or more people are dying because of COVID-19

fig=px.bar(x=grouped_multiple.index.date,y=grouped_multiple["Recovered"]+grouped_multiple["Deaths"])
fig.update_layout(title="Distribution plot for Closed Case",
                  xaxis_title="Date",yaxis_title="Number of Cases",)
fig.show()

grouped_multiple["WeekofYear"]=grouped_multiple.index.weekofyear
week_num=[]
week_Confirmed=[]
week_Recovered=[]
week_Deaths=[]
w=1

for i in list(grouped_multiple["WeekofYear"].unique()):
  week_Confirmed.append(grouped_multiple[grouped_multiple["WeekofYear"]==i]["Confirmed"].iloc[-1])
  week_Recovered.append(grouped_multiple[grouped_multiple["WeekofYear"]==i]["Recovered"].iloc[-1])
  week_Deaths.append(grouped_multiple[grouped_multiple["WeekofYear"]==i]["Deaths"].iloc[-1])
  week_num.append(w)
  w=w+1

plt.figure(figsize=(10,5))
#plt.plot(week_num,week_Confirmed, marker="o", color='Blue', linewidth=3, label="Confirmed")
plt.plot(week_num,week_Confirmed,label='Confirmed',marker="o", color='Blue', linewidth=3)
plt.plot(week_num,week_Recovered,label='Recovered',marker="o", color='green', linewidth=3)
plt.plot(week_num,week_Deaths,label='Deaths',marker="o",color='Red', linewidth=3)
plt.xlabel("Week Number")
plt.ylabel("Number of Cases")
plt.title("Weekly progress of different types of Cases")
plt.legend()
plt.xticks(rotation=90)

plt.savefig('02br.png')

fig,(ax1,ax2,ax3)=plt.subplots(1,3,figsize=(20,8))
 sns.barplot(x=week_num,y=pd.Series(week_Confirmed).diff().fillna(0),ax=ax1)
 sns.barplot(x=week_num,y=pd.Series(week_Recovered).diff().fillna(0),ax=ax2)
 sns.barplot(x=week_num,y=pd.Series(week_Deaths).diff().fillna(0),ax=ax3)
 ax1.set_xlabel("Week Number")
 ax2.set_xlabel("Week Number")
 ax1.set_ylabel("Number of Confirmed Cases")
 ax2.set_ylabel("Number of Recovered Cases")
 ax3.set_ylabel("Number of Deaths Cases")
 ax1.set_title("Weekly increase in number of Confirmed Cases")
 ax2.set_title("Weekly increase in number of Recovered Cases")
 ax3.set_title("Weekly increase in number of Deaths Cases")
 plt.show()

# Growth rate of Confirmed, Recovered and Death Cases
print("Average increase in number of confirmed cases everyday:",np.round(grouped_multiple["Confirmed"].diff().fillna(0).mean()))
print("Average increase in number of Recovered cases everyday:",np.round(grouped_multiple["Recovered"].diff().fillna(0).mean()))
print("Average increase in number of Deaths cases everyday:",np.round(grouped_multiple["Deaths"].diff().fillna(0).mean()))
plt.figure(figsize=(10,5))
plt.plot(grouped_multiple["Confirmed"].diff().fillna(0),label="Daily increase in confirmed cases",color='blue',linewidth=3)
plt.plot(grouped_multiple["Recovered"].diff().fillna(0),label="Daily increase in Recovered cases",color='green',linewidth=3)
plt.plot(grouped_multiple["Deaths"].diff().fillna(0),label="Daily increase in Deaths cases",color='red',linewidth=3)
plt.xlabel("Timestamp")
plt.ylabel("Daily increase")
plt.title("Daily increase")
plt.legend()
plt.xticks(rotation=90)
plt.show()

# Top 10 Countries as per number of Confirmed,Recovered and Deaths Cases
 Country=Covid19[Covid19["ObservationDate"]==Covid19["ObservationDate"].max()].groupby(["Country/Region"]).agg({"Confirmed":"sum","Recovered":"sum","Deaths":"sum"}).sort_values(["Confirmed"],ascending=False)
 fig,(ax1,ax2,ax3)=plt.subplots(1,3, figsize=(20,8))
 top_10_Confirmed=Country.sort_values(["Confirmed"],ascending=False).head(10)
 top_10_Recovered=Country.sort_values(["Recovered"],ascending=False).head(10)
 top_10_Deaths=Country.sort_values(["Deaths"],ascending=False).head(10)

 sns.barplot(x=top_10_Confirmed["Confirmed"],y=top_10_Confirmed.index,ax=ax1)
 ax1.set_title("Top 10 Countries as per number of Confirmed Cases")
 sns.barplot(x=top_10_Recovered["Recovered"],y=top_10_Recovered.index,ax=ax2)
 ax2.set_title("Top 10 Countries as per number of Recovered Cases")
 sns.barplot(x=top_10_Deaths["Deaths"],y=top_10_Deaths.index,ax=ax3)
 ax3.set_title("Top 10 Countries as per number of Deaths Cases")
 
plt.savefig('03br.png')

# Data Analysis for China
China_data=Covid19[Covid19["Country/Region"]=="Mainland China"]
grouped_multiple_China=China_data.groupby(["ObservationDate"]).agg({"Confirmed":"sum","Recovered":"sum","Deaths":"sum"})
print (grouped_multiple_China.iloc[-1])
print("Total Active Cases",grouped_multiple_China["Confirmed"].iloc[-1]-grouped_multiple_China["Recovered"].iloc[-1]-grouped_multiple_China["Deaths"].iloc[-1])
print("Total Closed Cases",grouped_multiple_China["Recovered"].iloc[-1]+grouped_multiple_China["Deaths"].iloc[-1])

grouped_multiple_China["WeekofYear"]=grouped_multiple_China.index.weekofyear
week_num_China=[]
China_week_Confirmed=[]
China_week_Recovered=[]
China_week_Deaths=[]
w=1
for i in list(grouped_multiple_China["WeekofYear"].unique()):
  China_week_Confirmed.append(grouped_multiple_China[grouped_multiple_China["WeekofYear"]==i]["Confirmed"].iloc[-1])
  China_week_Recovered.append(grouped_multiple_China[grouped_multiple_China["WeekofYear"]==i]["Recovered"].iloc[-1])
  China_week_Deaths.append(grouped_multiple_China[grouped_multiple_China["WeekofYear"]==i]["Deaths"].iloc[-1])
  week_num_China.append(w)
  w=w+1

plt.figure(figsize=(8,5))
#plt.plot(week_num_China,China_week_Confirmed,marker="o",color='blue',linewidth=3)

plt.plot(week_num_China,China_week_Confirmed,label='Confirmed in Mainland China',color='blue',linewidth=3)
plt.plot(week_num_China,China_week_Recovered,label='Recovered in Mainland China',color='green',linewidth=3)
plt.plot(week_num_China,China_week_Deaths,label='Deaths in Mainland China', color='red',linewidth=3,)
plt.xlabel("Week Number")
plt.ylabel("Number of Cases")
plt.title("Weekly Prgress of different types of Cases in China")
plt.legend()
plt.xticks(rotation=90)

# Data Analysis for US 
US_data=Covid19[Covid19["Country/Region"]=="US"]
grouped_multiple_US=US_data.groupby(["ObservationDate"]).agg({"Confirmed":"sum","Recovered":"sum","Deaths":"sum"})
print (grouped_multiple_US.iloc[-1])
print("Total Active Cases",grouped_multiple_US["Confirmed"].iloc[-1]-grouped_multiple_US["Recovered"].iloc[-1]-grouped_multiple_US["Deaths"].iloc[-1])
print("Total Closed Cases",grouped_multiple_US["Recovered"].iloc[-1]+grouped_multiple_US["Deaths"].iloc[-1])

grouped_multiple_US["WeekofYear"]=grouped_multiple_US.index.weekofyear
week_num_US=[]
US_week_Confirmed=[]
US_week_Recovered=[]
US_week_Deaths=[]
w=1
for i in list(grouped_multiple_US["WeekofYear"].unique()):
  US_week_Confirmed.append(grouped_multiple_US[grouped_multiple_US["WeekofYear"]==i]["Confirmed"].iloc[-1])
  US_week_Recovered.append(grouped_multiple_US[grouped_multiple_US["WeekofYear"]==i]["Recovered"].iloc[-1])
  US_week_Deaths.append(grouped_multiple_US[grouped_multiple_US["WeekofYear"]==i]["Deaths"].iloc[-1])
  week_num_US.append(w)
  w=w+1

plt.figure(figsize=(8,5))
#plt.plot(week_num_US,US_week_Confirmed,marker="o",color='blue',linewidth=3)
plt.plot(week_num_US,US_week_Confirmed,label='Confirmed in US ', color='blue',linewidth=3)
plt.plot(week_num_US,US_week_Recovered,label='Recovered in US', color='green',linewidth=3)
plt.plot(week_num_US,US_week_Deaths,label='Deaths in US',color='red',linewidth=3,)
plt.xlabel("Week Number")
plt.ylabel("Number of Cases")
plt.title("Weekly Prgress of different types of Cases in US")
plt.legend()
plt.xticks(rotation=90)

# Data Analysis for Italy 
Italy_data=Covid19[Covid19["Country/Region"]=="Italy"]
grouped_multiple_Italy=Italy_data.groupby(["ObservationDate"]).agg({"Confirmed":"sum","Recovered":"sum","Deaths":"sum"})
print (grouped_multiple_Italy.iloc[-1])
print("Total Active Cases",grouped_multiple_Italy["Confirmed"].iloc[-1]-grouped_multiple_Italy["Recovered"].iloc[-1]-grouped_multiple_Italy["Deaths"].iloc[-1])
print("Total Closed Cases",grouped_multiple_Italy["Recovered"].iloc[-1]+grouped_multiple_Italy["Deaths"].iloc[-1])

grouped_multiple_Italy["WeekofYear"]=grouped_multiple_Italy.index.weekofyear
week_num_Italy=[]
Italy_week_Confirmed=[]
Italy_week_Recovered=[]
Italy_week_Deaths=[]
w=1
for i in list(grouped_multiple_Italy["WeekofYear"].unique()):
  Italy_week_Confirmed.append(grouped_multiple_Italy[grouped_multiple_Italy["WeekofYear"]==i]["Confirmed"].iloc[-1])
  Italy_week_Recovered.append(grouped_multiple_Italy[grouped_multiple_Italy["WeekofYear"]==i]["Recovered"].iloc[-1])
  Italy_week_Deaths.append(grouped_multiple_Italy[grouped_multiple_Italy["WeekofYear"]==i]["Deaths"].iloc[-1])
  week_num_Italy.append(w)
  w=w+1

plt.figure(figsize=(8,5))
#plt.plot(week_num_Italy,Italy_week_Confirmed,marker="o",color='blue',linewidth=3)
plt.plot(week_num_Italy,Italy_week_Confirmed,label='Confirmed in Italy',color='blue',linewidth=3)
plt.plot(week_num_Italy,Italy_week_Recovered,label='Recovered in Italy',color='green',linewidth=3)
plt.plot(week_num_Italy,Italy_week_Deaths,label='Deaths in Italy',color='red',linewidth=3,)
plt.xlabel("Week Number")
plt.ylabel("Number of Cases")
plt.title("Weekly Prgress of different types of Cases in Italy")
plt.legend()
plt.xticks(rotation=90)

# Data Analysis for Spain 
Spain_data=Covid19[Covid19["Country/Region"]=="Spain"]
grouped_multiple_Spain=Spain_data.groupby(["ObservationDate"]).agg({"Confirmed":"sum","Recovered":"sum","Deaths":"sum"})
print (grouped_multiple_Spain.iloc[-1])
print("Total Active Cases",grouped_multiple_Spain["Confirmed"].iloc[-1]-grouped_multiple_Spain["Recovered"].iloc[-1]-grouped_multiple_Spain["Deaths"].iloc[-1])
print("Total Closed Cases",grouped_multiple_Spain["Recovered"].iloc[-1]+grouped_multiple_Spain["Deaths"].iloc[-1])

grouped_multiple_Spain["WeekofYear"]=grouped_multiple_Spain.index.weekofyear
week_num_Spain=[]
Spain_week_Confirmed=[]
Spain_week_Recovered=[]
Spain_week_Deaths=[]
w=1
for i in list(grouped_multiple_Spain["WeekofYear"].unique()):
  Spain_week_Confirmed.append(grouped_multiple_Spain[grouped_multiple_Spain["WeekofYear"]==i]["Confirmed"].iloc[-1])
  Spain_week_Recovered.append(grouped_multiple_Spain[grouped_multiple_Spain["WeekofYear"]==i]["Recovered"].iloc[-1])
  Spain_week_Deaths.append(grouped_multiple_Spain[grouped_multiple_Spain["WeekofYear"]==i]["Deaths"].iloc[-1])
  week_num_Spain.append(w)
  w=w+1

plt.figure(figsize=(8,5))
#plt.plot(week_num_Spain,Spain_week_Confirmed,marker="o",color='blue',linewidth=3)
plt.plot(week_num_Spain,Spain_week_Confirmed,label='Confirmed in Spain',color='blue',linewidth=3)
plt.plot(week_num_Spain,Spain_week_Recovered,label='Recovered in Spain',color='green',linewidth=3)
plt.plot(week_num_Spain,Spain_week_Deaths,label='Deaths in Spain',color='red',linewidth=3,)
plt.xlabel("Week Number")
plt.ylabel("Number of Cases")
plt.title("Weekly Prgress of different types of Cases in Spain")
plt.legend()
plt.xticks(rotation=90)

# Comparison of China, Italy, US, and Spain 
China_data=Covid19[Covid19["Country/Region"]=="Mainland China"]
US_data=Covid19[Covid19["Country/Region"]=="US"]
Italy_data=Covid19[Covid19["Country/Region"]=="Italy"]
Spain_data=Covid19[Covid19["Country/Region"]=="Spain"]
rest_of_world=Covid19[(Covid19["Country/Region"]!="Mainland China")&(Covid19["Country/Region"]!="Italy")&(Covid19["Country/Region"]!="US")&(Covid19["Country/Region"]!="Spain")]

grouped_multiple_China=China_data.groupby(["ObservationDate"]).agg({"Confirmed":'sum',"Recovered":'sum',"Deaths":'sum'})
grouped_multiple_US=US_data.groupby(["ObservationDate"]).agg({"Confirmed":'sum',"Recovered":'sum',"Deaths":'sum'})
grouped_multiple_Italy=Italy_data.groupby(["ObservationDate"]).agg({"Confirmed":'sum',"Recovered":'sum',"Deaths":'sum'})
grouped_multiple_Spain=Spain_data.groupby(["ObservationDate"]).agg({"Confirmed":'sum',"Recovered":'sum',"Deaths":'sum'})

fig, (ax1, ax2, ax3) = plt.subplots(1, 3,figsize=(20,5))
ax1.plot(grouped_multiple_China["Confirmed"],label="Confirmed cases in Mainland China",linewidth=3)
ax1.plot(grouped_multiple_US["Confirmed"],label="Confirmed cases in the USA",linewidth=3)
ax1.plot(grouped_multiple_Italy["Confirmed"],label="Confirmed cases in Italy",linewidth=3)
ax1.plot(grouped_multiple_Spain["Confirmed"],label="Confirmed cases in Spain",linewidth=3)
ax1.set_title("Confirmed Case Chart")
ax1.set_ylabel("Number of Cases")
ax1.set_xlabel("Week Number")
ax1.legend()
for tick in ax1.get_xticklabels():
    tick.set_rotation(90)

ax2.plot(grouped_multiple_China["Recovered"],label="Recoveries in Mainland China ",linewidth=3)
ax2.plot(grouped_multiple_US["Recovered"],label="Recoveries in US ",linewidth=3)
ax2.plot(grouped_multiple_Italy["Recovered"],label="Recoveries in Italy",linewidth=3)
ax2.plot(grouped_multiple_Spain["Recovered"],label="Recovery in Spain",linewidth=3)
ax2.set_title("Recovery Case Chart")
ax2.set_ylabel("Number of Cases")
ax2.set_xlabel("Week Number")
ax2.legend()
for tick in ax2.get_xticklabels():
    tick.set_rotation(90)

ax3.plot(grouped_multiple_China["Deaths"],label='Deaths in Mainland China',linewidth=3)
ax3.plot(grouped_multiple_US["Deaths"],label='Deaths in the USA',linewidth=3)
ax3.plot(grouped_multiple_Italy["Deaths"],label='Deaths in Italy',linewidth=3)
ax3.plot(grouped_multiple_Spain["Deaths"],label='Deaths in Spain',linewidth=3)
ax3.set_title("Deaths Case Chart")
ax3.set_ylabel("Number of Cases")
ax3.set_xlabel("Week Number")
ax3.legend()
for tick in ax3.get_xticklabels():
    tick.set_rotation(90)
    
plt.savefig('04br.png')

# Linear Regression  (95)
grouped_multiple["Days Since"]=grouped_multiple.index-grouped_multiple.index[0]
grouped_multiple["Days Since"]=grouped_multiple["Days Since"].dt.days
train_ml=grouped_multiple.iloc[:int(grouped_multiple.shape[0]*0.95)] 
valid_ml=grouped_multiple.iloc[:int(grouped_multiple.shape[0]*0.95):]
model_scores=[]

#Linear Regression Model
lin_reg=LinearRegression(normalize=True)

lin_reg.fit(np.array(train_ml["Days Since"]).reshape(-1,1),np.array(train_ml["Confirmed"]).reshape(-1,1))

Prediction_valid_lin_reg=lin_reg.predict(np.array(valid_ml["Days Since"]).reshape(-1,1))

model_scores.append(np.sqrt(mean_squared_error(valid_ml["Confirmed"],Prediction_valid_lin_reg)))
print("Root Mean Square Error for Linear Regression: ",np.sqrt(mean_squared_error(valid_ml["Confirmed"],Prediction_valid_lin_reg)))

#model_scores.append(np.sqrt(mean_squared_error(valid_ml["Confirmed"],Prediction_valid_lin_reg)))
#print("Root Mean Square Error for Linear Regression: ",np.sqrt(mean_squared_error(valid_ml["Confirmed"],Prediction_valid_lin_reg)))

#model_scores.append((mean_squared_error(valid_ml["Confirmed"],Prediction_valid_lin_reg)))
#print("Mean Squared Error for Linear Regression: ",(mean_squared_error(valid_ml["Confirmed"],Prediction_valid_lin_reg)))

model_scores.append((mean_absolute_error(valid_ml["Confirmed"],Prediction_valid_lin_reg)))
print("Mean Absolute Error for Linear Regression: ",(mean_absolute_error(valid_ml["Confirmed"],Prediction_valid_lin_reg)))

model_scores.append((r2_score(valid_ml["Confirmed"],Prediction_valid_lin_reg)))
print("r2_score for Linear Regression: ",(r2_score(valid_ml["Confirmed"],Prediction_valid_lin_reg)))

plt.figure(figsize=(12,6))
prediction_linreg=lin_reg.predict(np.array(grouped_multiple["Days Since"]).reshape(-1,1))
plt.plot(grouped_multiple["Confirmed"],label="Train Actual Confirmed Cases")
plt.plot(grouped_multiple.index,prediction_linreg,label="Predicted Confirmed Cases using Linear Regression",color='red')
#plt.plot(grouped_multiple.index,prediction_linreg, linestyle='--',label="Predicted Confirmed Cases using Linear Regression",color='green')
plt.xlabel('Date')
plt.ylabel('Confirmed Cases')
plt.title(" Linear Regression Model for Prediction of Confirmed Cases  ")
plt.xticks(rotation=90)
plt.legend()
plt.savefig('05br.png')

new_date=[]
new_prediction_lr=[]
for i in range(1,18):
  new_date.append(grouped_multiple.index[-1]+timedelta(days=i))
  new_prediction_lr.append(lin_reg.predict(np.array(grouped_multiple["Days Since"].max()+i).reshape(-1,1))[0][0])
pd.set_option("display.float_format",lambda x: '%.f' % x)   
model_predictions=pd.DataFrame(zip(new_date,new_prediction_lr),columns = ["Dates","Linear Regression Prediction"])
model_predictions.head(5)

#LogisticRegression
#from sklearn.linear_model import LogisticRegression
#from sklearn import metrics 
#grouped_multiple["Days Since"]=grouped_multiple.index-grouped_multiple.index[0]
#grouped_multiple["Days Since"]=grouped_multiple["Days Since"].dt.days
#train_ml=grouped_multiple.iloc[:int(grouped_multiple.shape[0]*0.95)]
#valid_ml=grouped_multiple.iloc[:int(grouped_multiple.shape[0]*0.95)]
#model_scores=[]

#Logistic Regression Model()

#log_reg=LogisticRegression()
#log_reg.fit(np.array(train_ml["Days Since"]).reshape(-1,1),np.array(train_ml["Confirmed"]).reshape(-1,1))

#Prediction_valid_log_reg=log_reg.predict(np.array(valid_ml["Days Since"]).reshape(-1,1))

#model_scores.append(np.sqrt(mean_squared_error(valid_ml["Confirmed"],Prediction_valid_log_reg)))
#print("Root Mean Square Error for Logistic Regression: ",np.sqrt(mean_squared_error(valid_ml["Confirmed"],Prediction_valid_log_reg)))


#model_scores.append((r2_score(valid_ml["Confirmed"],Prediction_valid_log_reg)))
#print("r2_score for Linear Regression: ",(r2_score(valid_ml["Confirmed"],Prediction_valid_log_reg)))

#plt.figure(figsize=(12,6))
#prediction_logreg=log_reg.predict(np.array(grouped_multiple["Days Since"]).reshape(-1,1))
#plt.plot(grouped_multiple["Confirmed"],label="Train Actual Confirmed Cases")
#plt.plot(grouped_multiple.index,prediction_logreg,label="Predicted Confirmed Cases using Logistic Regression",color='red')
#plt.xlabel('Date')
#plt.ylabel('Confirmed Cases')
#plt.title(" Logistic Regression Model for Prediction of Confirmed Cases  ")
#plt.xticks(rotation=90)
#plt.legend()

#new_date=[]
#new_prediction_lg=[]
#for i in range(1,18):
 # new_date.append(grouped_multiple.index[-1]+timedelta(days=i))
  #new_prediction_lg.append(log_reg.predict(np.array(grouped_multiple["Days Since"].max()+i).reshape(-1,1))[0])

#pd.set_option("display.float_format",lambda x: '%.f' % x)   
#model_predictions=pd.DataFrame(zip(new_date,new_prediction_lg),columns = ["Dates","Logistic Regression Prediction"])
#model_predictions.head()

# Polynomial Regression
train_ml=grouped_multiple.iloc[:int(grouped_multiple.shape[0]*0.95)]
valid_ml=grouped_multiple.iloc[int(grouped_multiple.shape[0]*0.95):]

poly = PolynomialFeatures(degree = 2)        #6

train_poly=poly.fit_transform(np.array(train_ml["Days Since"]).reshape(-1,1))
valid_poly=poly.fit_transform(np.array(valid_ml["Days Since"]).reshape(-1,1))
y=train_ml["Confirmed"]

linreg=LinearRegression(normalize=True)
linreg.fit(train_poly,y)

prediction_poly=linreg.predict(valid_poly)
rmse_poly=np.sqrt(mean_squared_error(valid_ml["Confirmed"],prediction_poly))
model_scores.append(rmse_poly)
print("Root Mean Squared Error for Polynomial Regression: ",rmse_poly)
#mse_poly=(mean_squared_error(valid_ml["Confirmed"],prediction_poly))
#model_scores.append(mse_poly)
#print("Mean Squared Error for Polynomial Regression: ",mse_poly)

model_scores.append((mean_absolute_error(valid_ml["Confirmed"],prediction_poly)))
print("Mean Absolute Error for Polynomial Regression: ",(mean_absolute_error(valid_ml["Confirmed"],prediction_poly)))


model_scores.append((r2_score(valid_ml["Confirmed"],prediction_poly)))
print(" R Squared for Polynomial Regression: ",(r2_score(valid_ml["Confirmed"],prediction_poly)))

#comp_data=poly.fit_transform(np.array(grouped_multiple["Days Since"]).reshape(-1,1))
poly_reg=poly.fit_transform(np.array(grouped_multiple["Days Since"]).reshape(-1,1))
plt.figure(figsize=(12,6))
predictions_poly=linreg.predict(poly_reg)
plt.figure(figsize=(12,6))
prediction_linreg=lin_reg.predict(np.array(grouped_multiple["Days Since"]).reshape(-1,1))
plt.plot(grouped_multiple["Confirmed"],label="Train Actual Confirmed Cases")
plt.plot(grouped_multiple.index,predictions_poly,label="Predicted Confirmed Cases using Polynomial Regression",color='red')
#plt.plot(grouped_multiple.index,predictions_poly, linestyle='--',label="Predicted Confirmed Cases using Polynomial Regression",color='green')
plt.xlabel('Date')
plt.ylabel('Confirmed Cases')
plt.title(" Polynomial Regression Model for Prediction of Confirmed Cases  ")
plt.xticks(rotation=90)
plt.legend()

new_prediction_poly=[]
for i in range(1,18):
    new_date_poly=poly.fit_transform(np.array(grouped_multiple["Days Since"].max()+i).reshape(-1,1))
    new_prediction_poly.append(linreg.predict(new_date_poly)[0])
pd.set_option("display.float_format",lambda x: '%.f' % x)   
model_predictions=pd.DataFrame(zip(new_date,new_prediction_poly),columns = ["Dates","Polynomial Regression Prediction"])
model_predictions.head()

# Support Vector Machine Model for Prediction of Confirmed Cases
#Intializing SVR Model and with hyperparameters for GridSearchCV
svm=SVR(C=1,degree=5,kernel='poly',epsilon=0.001)

#Performing GridSearchCV to find the Best Estimator
svm.fit(np.array(train_ml["Days Since"]).reshape(-1,1),np.array(train_ml["Confirmed"]).reshape(-1,1))

Prediction_valid_svm=svm.predict(np.array(valid_ml["Days Since"]).reshape(-1,1))

model_scores.append(np.sqrt(mean_squared_error(valid_ml["Confirmed"],Prediction_valid_svm)))
#rmse_svm_Linear=np.sqrt(mean_squared_error(valid_ml["Confirmed"],Prediction_valid_svm))

precision = 2
#print( "{:.{}f}".format( pi, precision )) 

print( "Root Mean Square Error for Support Vectore Machine: {:.{}f}".format( np.sqrt(mean_squared_error(valid_ml["Confirmed"],Prediction_valid_svm)), precision ))

model_scores.append((mean_absolute_error(valid_ml["Confirmed"],Prediction_valid_svm)))
precision = 2
print( " Mean Absolute Error for Support Vectore Machine: {:.{}f}".format((mean_absolute_error(valid_ml["Confirmed"],Prediction_valid_svm)), precision ))

#model_scores.append(np.sqrt(mean_absolute_error(valid_ml["Confirmed"],Prediction_valid_svm)))
#precision = 2
#print( "Root Mean Absolute Error for Support Vectore Machine: {:.{}f}".format( np.sqrt(mean_absolute_error(valid_ml["Confirmed"],Prediction_valid_svm)), precision ))

#model_scores.append((r2_score(valid_ml["Confirmed"],Prediction_valid_svm)))
#print( " R Square  for Support Vectore Machine: {:.{}f}".format((r2_score(valid_ml["Confirmed"],Prediction_valid_svm)), precision ))
#print((r2_score(valid_ml["Confirmed"],Prediction_valid_svm)), precision )

plt.figure(figsize=(12,6))
prediction_svm=svm.predict(np.array(grouped_multiple["Days Since"]).reshape(-1,1))
plt.plot(grouped_multiple["Confirmed"],label="Train Actual Confirmed Cases",linewidth=3)
plt.plot(grouped_multiple.index,prediction_svm,label="Best Fit for SVR",color='red')
#plt.plot(grouped_multiple.index,prediction_svm, linestyle='--',label="Best Fit for SVR",color='green')
plt.xlabel('Date')
plt.ylabel('Confirmed Cases')
plt.title(" Support Vector Machine Regressor  for Prediction of Confirmed Cases ")
plt.xticks(rotation=90)
plt.legend()

new_date=[]
new_prediction_svm=[]
for i in range(1,18):
  new_date.append(grouped_multiple.index[-1]+timedelta(days=i))
  new_prediction_svm.append(svm.predict(np.array(grouped_multiple["Days Since"].max()+i).reshape(-1,1))[0])
pd.set_option("display.float_format",lambda x: '%.f' % x)   
model_predictions=pd.DataFrame(zip(new_date,new_prediction_svm),columns = ["Dates","Support Vector Machine Prediction"])
model_predictions.head()

# Linear Regression,Polynomial Regression VS Support Vector Regression

new_date=[]
new_prediction_lr=[]
new_prediction_svm=[]
for i in range(1,18):
  new_date.append(grouped_multiple.index[-1]+timedelta(days=i))
  new_prediction_lr.append(lin_reg.predict(np.array(grouped_multiple["Days Since"].max()+i).reshape(-1,1))[0][0])
  new_prediction_poly.append(lin_reg.predict(np.array(grouped_multiple["Days Since"].max()+i).reshape(-1,1))[0][0])
  new_prediction_svm.append(svm.predict(np.array(grouped_multiple["Days Since"].max()+i).reshape(-1,1))[0])
pd.set_option("display.float_format",lambda x: '%.f' % x)   
model_predictions=pd.DataFrame(zip(new_date,new_prediction_lr,new_prediction_poly,new_prediction_svm),columns = ["Dates","Linear Regression","Polynomial Regression","Support Vector Regression"])
model_predictions.head()

# Time Series Forecasting
# Holt Model

train_ml=grouped_multiple.iloc[:int(grouped_multiple.shape[0]*0.95)]
valid_ml=grouped_multiple.iloc[int(grouped_multiple.shape[0]*0.95):]
y_pred=valid_ml.copy()

#holt=Holt(np.asarray(model_train["Confirmed"])).fit(smoothing_level=1.2, smoothing_slope=0.8,optimized=False)
holt=Holt(np.asarray(train_ml["Confirmed"])).fit(smoothing_level=1.2, smoothing_slope=0.9,optimized=False)

y_pred["Holt"]=holt.forecast(len(valid_ml))
model_scores.append(np.sqrt(mean_squared_error(y_pred["Confirmed"],y_pred["Holt"])))
print("Root Mean Square Error Holt's Linear Model: ",np.sqrt(mean_squared_error(y_pred["Confirmed"],y_pred["Holt"])))
#y_pred["Holt"]=holt.forecast(len(valid))
#rmse_holt_linear=np.sqrt(mean_squared_error(y_pred["Confirmed"],y_pred["Holt"]))
#model_scores.append(rmse_holt_linear)
#print("Root Mean Square Error Holt's Linear Model: ",rmse_holt_linear)

model_scores.append((mean_absolute_error(y_pred["Confirmed"],y_pred["Holt"])))
print("Root Mean Square Error Holt's Linear Model: ",(mean_absolute_error(y_pred["Confirmed"],y_pred["Holt"])))

#model_scores.append(np.sqrt(mean_absolute_error(y_pred["Confirmed"],y_pred["Holt"])))
#print("Root Mean Square Error Holt's Linear Model: ",np.sqrt(mean_absolute_error(y_pred["Confirmed"],y_pred["Holt"])))

y_pred["Holt"]=holt.forecast(len(valid_ml))
model_scores.append((r2_score(y_pred["Confirmed"],y_pred["Holt"])))
print("R  Square Error Holt's Linear Model: ",(r2_score(y_pred["Confirmed"],y_pred["Holt"])))

#fig=go.Figure()
#fig.add_trace(go.Scatter(x=train_ml.index, y=train_ml["Confirmed"],
              #     mode='lines+markers',name="Train Data for Confirmed Cases"))
#fig.add_trace(go.Scatter(x=valid_ml.index, y=y_pred["Holt"],
#mode='lines+markers',name="Predicted Confirmed Cases using Holt Regression",))
#fig.update_layout(title="Confirmed Cases Holt's Linear Model Prediction",
   #              xaxis_title="Date",yaxis_title="Confirmed Cases",legend=dict(x=0,y=1,traceorder="normal"))
#fig.show()

plt.figure(figsize=(12,6))
plt.plot(train_ml["Confirmed"],label="Train Actual Confirmed Cases",linewidth=3)
#plt.plot(train_ml.Confirmed,label="Train Set",marker='o')
#valid_ml.Confirmed.plot(label="Validation Set",marker='*')
y_pred.Holt.plot(label="Holt's Linear Model Predicted Set",color='red')
#y_pred.Holt.plot(label="Holt's Linear Model Predicted Set",marker='^')
plt.ylabel("Confirmed Cases")
plt.xlabel("Date Time")
plt.title("Holt's Linear Model for Prediction of Confirmed Cases ")
plt.xticks(rotation=90)
plt.legend()

holt_new_date=[]
holt_new_prediction=[]
for i in range(1,18):
  holt_new_date.append(grouped_multiple.index[-1]+timedelta(days=i))
  holt_new_prediction.append(holt.forecast((len(valid_ml)+i))[-1])

model_predictions["Holt Linear Model Prediction"]=holt_new_prediction
model_predictions.head(7)